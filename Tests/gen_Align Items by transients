----------------------------------------------------------------------------------------------------
-- Controls ----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
--------------------------------------------------
-- Sliders ---------------------------------------
--------------------------------------------------
local Sensitivity = H_Slider:new(10,10,300,18,  0.3,0.5,0.5,0.3, "Sensitivity","Arial",15, 0.2 )
function Sensitivity:draw_val()
  self.form_val = math.ceil(self.norm_val*100)  -- form value
  local x,y,w,h  = self.x,self.y,self.w,self.h
  local val = string.format("%d", self.form_val).." %"
  local val_w, val_h = gfx.measurestr(val)
  gfx.x = x+w-val_w-5
  gfx.drawstr(val)--draw Slider Value
end

---------------
local Threshold = H_Slider:new(10,30,300,18,  0.3,0.5,0.5,0.3, "Threshold","Arial",15, 0.7 )
function Threshold:draw_val()
  self.form_val = -60 + self.norm_val*60  -- form value
  self.form_val = math.floor(self.form_val/0.2)*0.2
  local x,y,w,h  = self.x,self.y,self.w,self.h
  local val = string.format("%.1f", self.form_val).." dB"
  local val_w, val_h = gfx.measurestr(val)
  gfx.x = x+w-val_w-5
  gfx.drawstr(val)--draw Slider Value
end

---------------
local Retrig = H_Slider:new(10,50,300,18,  0.3,0.5,0.5,0.3, "Retrig","Arial",15, 0.3 )
function Retrig:draw_val()
  self.form_val = 50+ math.floor(self.norm_val*500)
  local x,y,w,h  = self.x,self.y,self.w,self.h
  local val = string.format("%d", self.form_val).." ms"
  local val_w, val_h = gfx.measurestr(val)
  gfx.x = x+w-val_w-5
  gfx.drawstr(val)--draw Slider Value
end

---------------
local Align = H_Slider:new(10,70,300,18,  0.3,0.5,0.5,0.3, "Align","Arial",15, 1 )
function Align:draw_val()
  self.form_val = math.ceil(self.norm_val*100)  -- form value
  local x,y,w,h  = self.x,self.y,self.w,self.h
  local val = string.format("%d", self.form_val).." %"
  local val_w, val_h = gfx.measurestr(val)
  gfx.x = x+w-val_w-5
  gfx.drawstr(val)--draw Slider Value
end

--------------------------------------------------
-- Checboxes -------------------------------------
--------------------------------------------------
local RefItem = CheckBox:new(10,100,300,18,  0.3,0.5,0.5,0.3, "", "Arial",15,  1,
                              {"Reference"} )

--------------------------------------------------
-- Buttons ---------------------------------------
--------------------------------------------------
local Quantize = Button:new(170,130,140,20,  0.3,0.5,0.5,0.3, "Quantize markers", "Arial",15 )


--------------------------------------------------
-- controls functions ----------------------------
--------------------------------------------------
function onUp_Main()
  Run_Main = true
end
---------------
Sensitivity.onUp  = onUp_Main
Threshold.onUp  = onUp_Main  
Retrig.onUp     = onUp_Main
Align.onUp      = onUp_Main
RefItem.onClick = onUp_Main
Quantize.onClick = 
function()
  local sel_start, sel_end = reaper.GetSet_LoopTimeRange(0, 0, 0, 0, 0)
  if sel_end - sel_start>0 then reaper.Main_OnCommand(41847, 0)
     else reaper.Main_OnCommand(41846, 0)
  end 
end

--------------------------------------------------
-- Controls Tables -------------------------------
--------------------------------------------------
local Slider_TB   = {Sensitivity, Threshold, Retrig, Align}
local CheckBox_TB = {RefItem}
--local Button_TB   = {Quantize}




----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
--   SCRIPT - MAIN   -------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
function Time_Test(start_time, msg_txt)  -- time test function
  local msg_txt = msg_txt or "Proccessing Time = "
  return reaper.ShowConsoleMsg(msg_txt .. reaper.time_precise()-start_time ..'\n')
end
----------------------------------------------------------------------
--  Set Threshold, Sensitivity Values  ---------------------------------
----------------------------------------------------------------------
function Set_ThreshSens_Values()
  -- Set Sensitivity --------
  reaper.Main_OnCommand(967, 0)  -- "reset" Sensitivity
  for i=1, Sensitivity.form_val do          -- set new value
     reaper.Main_OnCommand(41536, 0)
  end
  -- Set threshold --------
  reaper.Main_OnCommand(968, 0)  -- "reset" Threshold
  for i=1, (60 + Threshold.form_val)/0.2 do -- set new value
     reaper.Main_OnCommand(40218, 0)
  end
end

----------------------------------------------------------------------
-- Normalize - UnNormalise Item -----------------------------------------
----------------------------------------------------------------------
-- нормализация с учетом уровня айтема и тейка, сохр. ориг уровней ---
function Normalize(item, take) 
  -- Save item, take vols for restoring --
  local item_vol = reaper.GetMediaItemInfo_Value(item, "D_VOL") 
  local take_vol = reaper.GetMediaItemTakeInfo_Value(take, "D_VOL")
  -- Full normalize --
  reaper.SetMediaItemInfo_Value(item, "D_VOL", 1) -- reset item_vol to 1 (0 dB)
  reaper.Main_OnCommand(40108, 0)                 -- normalize(take vol change)
  return item_vol, take_vol -- need for restoring previos values
end

-- восстановление оригинальных уровней айтема и тейка ------
function UnNormalise(item, take, item_vol, take_vol)
  reaper.SetMediaItemInfo_Value(item, "D_VOL", item_vol)
  reaper.SetMediaItemTakeInfo_Value(take, "D_VOL", take_vol)
end

----------------------------------------------------------------------
-- Del Stretch Markers in range ------------------------------------------
----------------------------------------------------------------------
function Del_StretchMarkers()  -- Удаляет существующие маркеры на обр. участке
  local sel_start, sel_end = reaper.GetSet_LoopTimeRange(0, 0, 0, 0, 0)
  if sel_end-sel_start>0 then reaper.Main_OnCommand(41845, 0) -- remove str-marks(in time sel) -- case 1
     else reaper.Main_OnCommand(41844, 0)                     -- remove str-marks(All) -- case 2
  end
end
----------------------------------------------------------------------
-- Create Stretch Markers tables -------------------------------------
----------------------------------------------------------------------
function Create_MarkersTable(item, take, mrks_start, mrks_end)
  local mark_tb = {}
  ----------------------
  reaper.SelectAllMediaItems(0, false)     -- unsel all items
  reaper.SetMediaItemSelected(item, true)  -- sel only current item
  -- Del old markers from time sel or all from item --
  -- Возможно, работа по time sel не имеет особого смысла...убрать?
  Del_StretchMarkers() -- Удаляет существующие маркеры на обр. участке
  ----------------------
  local item_vol, take_vol = Normalize(item, take) -- Normalize
  ----------------------
  local retrig = Retrig.form_val/1000
  local last_trig = - retrig
  local curs_pos, last_curs_pos
  ----------------------
  reaper.SetEditCurPos(mrks_start, false, false)  -- cursor to mrks_start 
  mark_tb[1] = mrks_start                         -- first mark(in mrks_start)
  --------------------------------------
  while true do reaper.Main_OnCommand(40375, 0)   -- cursor to next transient(in sel item)
      curs_pos = reaper.GetCursorPosition()       -- get current curs_pos time 
      if curs_pos>mrks_end or curs_pos==last_curs_pos then break
         elseif curs_pos-last_trig>retrig then 
           --------------
           mark_tb[#mark_tb+1] = curs_pos         -- Используется проектное время - так проще!
           last_trig = curs_pos                   -- upd last_trig pos   
           --------------
      end
      last_curs_pos = curs_pos                    -- upd last_curs pos
  end
  --------------------------------------
  mark_tb[#mark_tb+1] = mrks_end                  -- last mark(in mrks_end)
  ----------------------
  UnNormalise(item, take, item_vol, take_vol)     -- Un-Normalise
  ----------------------
  return mark_tb 
end

----------------------------------------------------------------------
--  Compare_StretchMarkers(ref_tb and proc_tb)  ----------------------
----------------------------------------------------------------------
function Compare_MarkersTables(ref_tb, proc_tb, ref_take, proc_take)
  ------------------------------------------
  local search_zone = (Retrig.form_val/1000)/2 -- зона поиска "парных" маркеров 
  ------------------------------------------
  -- compare and rebiuild marker-tables ----
  local next=1
  for i=1, #ref_tb do 
      local ref_val = ref_tb[i]     -- Референсный маркер из ref_tb 
      local min_diff = search_zone
      local proc_val, res_val, diff 
      -------------------
      for j=next, #proc_tb  do
          proc_val = proc_tb[j]     -- Текущий маркер из proc_tb
          -- for break ---------
          if proc_val>ref_val+search_zone then break end -- Выход из цикла по выходу из зоны поиска
          ----------------------
          diff = math.abs(ref_val-proc_val)
          ----------------------
          if diff<min_diff then min_diff = diff    -- обнов. мин. значение и сопутствующие
                 res_val    = proc_val   -- пригодится потом
                 proc_tb[j] = {res_val, ref_val}   -- найденный марк, ориг. позиция и необх. значение
            else proc_tb[j] = false      -- proc-маркер без пары - на удаление
          end
          ---------------------
          next = j+1
      end
      -------------------
      if not res_val then ref_tb[i] = false end   -- ref-маркер без пары - на удаление
  end
  ------------------------------------------
  -- process rest from proc_tb if need -----
  for i=next, #proc_tb do proc_tb[i] = false end  -- удаляет оставшиеся за бортом proc-маркеры

end

----------------------------------------------------------------------
--  Insert Ref Stretch Markers ------------------------------------------
----------------------------------------------------------------------
function Insert_RefStretchMarkers(ref_item, ref_take, ref_tb)
  local item_start = reaper.GetMediaItemInfo_Value(ref_item, "D_POSITION" )
  local playrate = reaper.GetMediaItemTakeInfo_Value(ref_take, 'D_PLAYRATE') 
  -- Insert markers --
  for i=1, #ref_tb do
     if ref_tb[i] then local pos = (ref_tb[i]-item_start)*playrate
      reaper.SetTakeStretchMarker(ref_take, -1, pos)
     end   
  end 
end

----------------------------------------------------------------------
--  Insert and Align Proc Stretch Markers(proc to ref)  -----------------
----------------------------------------------------------------------
function Insert_Align_ProcStretchMarkers(proc_item, proc_take, proc_tb)
  local proc_offs  = reaper.GetMediaItemTakeInfo_Value(proc_take, 'D_STARTOFFS') -- нужно для srcposIn!
  local item_start = reaper.GetMediaItemInfo_Value(proc_item, "D_POSITION" )
  local playrate = reaper.GetMediaItemTakeInfo_Value(proc_take, 'D_PLAYRATE') -- playrate
  local align_mlt = Align.norm_val
  -- Insert, align markers --
  for i=1, #proc_tb do
     if proc_tb[i] then 
        local orig_pos     = (proc_tb[i][1]-item_start)*playrate       -- original position
        local new_pos_max  = (proc_tb[i][2]-item_start)*playrate       -- 100% align position
        local new_pos  = orig_pos + (new_pos_max-orig_pos)*align_mlt   -- new position regard align_mlt
        local mark_idx = reaper.SetTakeStretchMarker(proc_take, -1, orig_pos, orig_pos+proc_offs) -- add mark to orig pos
        reaper.SetTakeStretchMarker(proc_take, mark_idx, new_pos)                                 -- change position
     end   
  end 
end

----------------------------------------------------------------------
-- Get Start, End Range -------------------------------------------------
----------------------------------------------------------------------
function Get_StartEndRange(ref_item, proc_item)
  local ref_item_start, ref_item_end, proc_item_start, proc_item_end   
  ref_item_start = reaper.GetMediaItemInfo_Value(ref_item, 'D_POSITION')
  ref_item_end   = ref_item_start+reaper.GetMediaItemInfo_Value(ref_item, 'D_LENGTH')
  proc_item_start = reaper.GetMediaItemInfo_Value(proc_item, 'D_POSITION')
  proc_item_end   = proc_item_start+reaper.GetMediaItemInfo_Value(proc_item, 'D_LENGTH')
  -------------
  local sel_start, sel_end = reaper.GetSet_LoopTimeRange(0, 0, 0, 0, 0) 
  -------------
  if  sel_end-sel_start>0 then 
         return math.max(sel_start,ref_item_start,proc_item_start), math.min(sel_end,ref_item_end,proc_item_end)
    else return math.max(ref_item_start,proc_item_start), math.min(ref_item_end,proc_item_end)
  end
end

----------------------------------------------------------------------
-- Get Items and active Takes -------------------------------------------
----------------------------------------------------------------------
function Get_SelItemsTakes()
  local items_cnt = reaper.CountSelectedMediaItems(0)
  -------------
  local items_tb = {}
  for i=0, items_cnt-1 do 
      local item = reaper.GetSelectedMediaItem(0, i)
      local take = reaper.GetActiveTake(item)
      if take and not reaper.TakeIsMIDI(take) then items_tb[#items_tb+1] = {item, take} end
  end
  -------------
  return items_tb
end

----------------------------------------------------------------------
-- Main --------------------------------------------------------------
----------------------------------------------------------------------
function MAIN()
  Set_ThreshSens_Values() -- Set Detection settings
  -- Get selected Items, active Takes --
  local items_tb = Get_SelItemsTakes()
  if #items_tb<2 then return reaper.MB("Need two or more selected Audio-Items!", "Info", 0) end
  ----------------------
  RefItem.norm_val2 = {}
  for k,v in pairs(items_tb) do
     local retval, name = reaper.GetSetMediaItemTakeInfo_String(items_tb[k][2], "P_NAME", "", false)
     name = "Refer : "..name
     local len = #name 
     while gfx.measurestr(name)>RefItem.w-15 do
           len = len-1  
           name = name:sub(1,len)..".."
     end 
     RefItem.norm_val2[k] = name
  end
 local ref = RefItem.norm_val
  ------------------------------------------------
  ------------------------------------------------
  reaper.PreventUIRefresh(777)
  reaper.Undo_BeginBlock()
  reaper.Main_OnCommand(reaper.NamedCommandLookup("_SWS_SAVEVIEW"), 0) -- SAVE VIEW
  local usr_curs_pos = reaper.GetCursorPosition() -- store usr(current) cursor pos
  
    ------------------------------------------------ 
    local ref_item, ref_take = items_tb[ref][1], items_tb[ref][2]   -- Reference
    -- Реф. таблицу - созд. один раз и в дальнейшем коприруется --
    local mrks_start, mrks_end = Get_StartEndRange(ref_item, ref_item) -- передается Ref-айтем в арг. чтобы не переписывать(поправить)
    local ref_tb = Create_MarkersTable(ref_item, ref_take, mrks_start, mrks_end) -- ref str_marks(реф. маркеры - не трогаются, исп. копия)
    ------------------------------------------------
    ------------------------------------------------  
    for i=1, #items_tb do 
      if i~=ref then -- Рефер не должен проходить!
        ----------------------------------------------
        -- Get StartEndRange - selection(or items edges in sel) --
        local proc_item, proc_take = items_tb[i][1], items_tb[i][2]     
        local mrks_start, mrks_end = Get_StartEndRange(ref_item, proc_item) -- Для текущей пары айтемов
        ----------------------------------------------
        -- Create markers tables ---------------------
        local ref_tb_copy = {} -- копия реф. таблицы(можно сделать лок. local ref_tb для цикла, но так яснее)
        for k,v in pairs(ref_tb) do 
            ref_tb_copy[k]=ref_tb[k]; ref_tb_copy[v]=ref_tb[v] 
        end 
        --local ref_tb  = Create_MarkersTable(ref_item, ref_take, mrks_start, mrks_end)   -- ref str_marks
        local proc_tb = Create_MarkersTable(proc_item, proc_take, mrks_start, mrks_end) -- proc str_marks
        ----------------------------------------------
        --- Compare, Insert, Align markers -----------
        Compare_MarkersTables(ref_tb_copy, proc_tb, ref_take, proc_take)
        Insert_Align_ProcStretchMarkers(proc_item, proc_take, proc_tb)  -- insert and align proc
      end 
    end
    ------------------------------------------------
    ------------------------------------------------
    Insert_RefStretchMarkers(ref_item, ref_take, ref_tb) -- insert refs(все, влючая непарные)
    reaper.SelectAllMediaItems(0, false)         -- unsel all items
    for i=1, #items_tb do reaper.SetMediaItemSelected(items_tb[i][1], true) end -- restore sel items 
    ---------------------
  reaper.SetEditCurPos(usr_curs_pos, false, false) -- restore usr cursor pos
  reaper.Main_OnCommand(reaper.NamedCommandLookup("_SWS_RESTOREVIEW"), 0) -- RESTORE VIEW
  reaper.Undo_EndBlock("Align Items by transients", -1)
  reaper.PreventUIRefresh(-777)
  ------------------------------------------------
  ------------------------------------------------
  --reaper.UpdateItemInProject(ref_item)
  --reaper.UpdateItemInProject(proc_item)
  reaper.UpdateTimeline()
end


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--   Draw controls(buttons,sliders,knobs etc)  ---------------------------------
--------------------------------------------------------------------------------
function draw_controls()
    --for key,btn    in pairs(Button_TB)   do btn:draw()    end 
    for key,sldr   in pairs(Slider_TB)   do sldr:draw()   end
    for key,ch_box in pairs(CheckBox_TB) do ch_box:draw() end
    --for key,frame  in pairs(Frame_TB)    do frame:draw()  end       
end
--------------------------------------------------------------------------------
--   INIT   --------------------------------------------------------------------
--------------------------------------------------------------------------------
function Init()
    -- Some gfx Wnd Default Values ---------------
    local R,G,B = 20,20,20              -- 0...255 format
    local Wnd_bgd = R + G*256 + B*65536 -- red+green*256+blue*65536  
    local Wnd_Title = "Align Items"
    local Wnd_Dock,Wnd_X,Wnd_Y = 0,100,350 
    Wnd_W,Wnd_H = 320,130 -- global values(used for define zoom level)
    -- Init window ------
    gfx.clear = Wnd_bgd         
    gfx.init( Wnd_Title, Wnd_W,Wnd_H, Wnd_Dock, Wnd_X,Wnd_Y )
    -- Init mouse last --
    last_mouse_cap = 0
    last_x, last_y = 0, 0
    mouse_ox, mouse_oy = -1, -1
end
----------------------------------------
--   Mainloop   ------------------------
----------------------------------------
function mainloop()
    -- zoom level -- 
    Z_w, Z_h = gfx.w/Wnd_W, gfx.h/Wnd_H
    if Z_w<0.65 then Z_w = 0.65 elseif Z_w>1.8 then Z_w = 1.8 end 
    if Z_h<0.65 then Z_h = 0.65 elseif Z_h>1.8 then Z_h = 1.8 end 
    -- mouse and modkeys --
    if gfx.mouse_cap&1==1   and last_mouse_cap&1==0  or   -- L mouse
       gfx.mouse_cap&2==2   and last_mouse_cap&2==0  or   -- R mouse
       gfx.mouse_cap&64==64 and last_mouse_cap&64==0 then -- M mouse
       mouse_ox, mouse_oy = gfx.mouse_x, gfx.mouse_y 
    end
    Ctrl  = gfx.mouse_cap&4==4   -- Ctrl  state
    Shift = gfx.mouse_cap&8==8   -- Shift state
    Alt   = gfx.mouse_cap&16==16 -- Shift state

    -------------------------
    -- MAIN functions -------
    -------------------------
    draw_controls()
    if Run_Main then MAIN(); Run_Main = false  end
    -------------------------
    -------------------------
    last_mouse_cap = gfx.mouse_cap
    last_x, last_y = gfx.mouse_x, gfx.mouse_y
    gfx.mouse_wheel = 0 -- reset mouse_wheel
    local char = gfx.getchar()
    if char==32 then reaper.Main_OnCommand(40044, 0) end -- play
    if char~=-1 then reaper.defer(mainloop) end          -- defer     
    -----------  
    gfx.update()
    -----------
end

--------------------------------------------------------------------------------
-- START -----------------------------------------------------------------------
--------------------------------------------------------------------------------
Run_Main = true
Init()
mainloop()


